geom_smooth(method = "lm") +
labs(
title = "Distance from Britain vs Number of Species",
subtitle = "Feature",
x = "Distance from Britain",
y = "Number of Species",
caption = "Miscellaneous Datasets"
) +
theme_minimal()
# Dipersão de Area vs number_of_species
dados %>%
ggplot(aes(x = area, y = number_of_species)) +
geom_point() +
geom_smooth(method = "lm") +
labs(
title = "Area vs Number of species",
subtitle = "Feature",
x = "Area",
y = "Number of species",
caption = "Miscellaneous Datasets"
) +
theme_minimal()
# Dipersão de number_of_soil_types vs number_of_species
dados %>%
ggplot(aes(x = number_of_soil_types, y = number_of_species)) +
geom_point() +
#geom_smooth(method = "lm")
labs(
title = "Number of Soil Types vs Number of Species",
subtitle = "Feature",
x = "Number of Soil Types",
y = "Number of Species",
caption = "Miscellaneous Datasets"
) +
theme_minimal()
# Dipersão de number_of_soil_types vs number_of_species
dados %>%
ggplot(aes(x = number_of_soil_types, y = number_of_species)) +
geom_point() +
geom_smooth(method = "lm") +
labs(
title = "Number of Soil Types vs Number of Species",
subtitle = "Feature",
x = "Number of Soil Types",
y = "Number of Species",
caption = "Miscellaneous Datasets"
) +
theme_minimal()
# Verifcando correlação
ggcorrplot(
cor(dados),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3.5
)
# Criando modelos para ajuste
modelo0 <- lm(number_of_species ~ 1, data = dados)
modelo1 <- lm(number_of_species ~ latitude + elevation + number_of_soil_types + latitude * number_of_soil_types, data = dados)
modelo2 <- lm(number_of_species ~ ., data = dados)
# Coletando informações de ajustes dos modelos
fit0 <- summary(modelo0)
fit1 <- summary(modelo1)
fit2 <- summary(modelo2)
# Tabulado resultado R2 e R2_Ajustado
R2 <- c(fit0$r.squared, fit1$r.squared, fit2$r.squared)
R2_ajustado <- c(fit0$adj.r.squared, fit1$adj.r.squared, fit2$adj.r.squared)
Modelo <- paste("Modelo", 0:2)
gof <- cbind(R2, R2_ajustado)
rownames(gof) <- Modelo
# Criando modelos para ajuste
modelo0 <- lm(number_of_species ~ 1, data = dados)
modelo1 <- lm(number_of_species ~ latitude + elevation + number_of_soil_types + latitude * number_of_soil_types, data = dados)
modelo2 <- lm(number_of_species ~ ., data = dados)
# Coletando informações de ajustes dos modelos
fit0 <- summary(modelo0)
fit1 <- summary(modelo1)
fit2 <- summary(modelo2)
# Tabulado resultado R2 e R2_Ajustado
R2 <- c(fit0$r.squared, fit1$r.squared, fit2$r.squared)
R2_ajustado <- c(fit0$adj.r.squared, fit1$adj.r.squared, fit2$adj.r.squared)
Modelo <- paste("Modelo", 0:2)
gof <- cbind(R2, R2_ajustado)
rownames(gof) <- Modelo
m_x1 <- step(modelo2, direction = "both")
summary(m_x1)
m_x2 <- step(modelo2, direction = "both", k = log(nrow(dados)))
summary(m_x2)
gof
gof
# Resumo Modelo 01
summary(modelo1)
m_x1 <- step(modelo2, direction = "both")
summary(m_x1)
m_x2 <- step(modelo2, direction = "both", k = log(nrow(dados)))
summary(m_x2)
# Gráficos residuais, para análise
par(mfrow = c(2, 2))
plot(modelo1)
# Teste de siguinificancia da regresão
anova(modelo0, modelo1)
anova(modelo1)
anova(modelo1)
drop1(modelo1, test = "F")
m0 <- lm(number_of_species ~ latitude + number_of_soil_types + latitude * number_of_soil_types, data = dados)
summary(m0)
m0 <- lm(number_of_species ~ latitude + sqrt(number_of_soil_types) + latitude * sqrt(number_of_soil_types), data = dados)
summary(m0)
m0 <- lm(number_of_species ~ latitude + number_of_soil_types + latitude * number_of_soil_types, data = dados)
summary(m0)
influ <- influence.measures(m0)
summary(influ)
# Removendo obeservações influentes dffit
dfits <- influ$is.inf[, 4]
id <- which(dfits)
# Atualizando modelo com retira das observação
m1 <- update(m0, data = dados[-id,])
summary(m1)
# Gráficos residuais, para análise
par(mfrow = c(2, 2))
plot(m1)
#
car::vif(m1)
m2 <- lm(number_of_species ~ latitude + sqrt(number_of_soil_types) + latitude * sqrt(number_of_soil_types), data = dados)
summary(m2)
# Gráficos residuais, para análise
par(mfrow = c(2, 2))
plot(m2)
influ <- influence.measures(m2)
summary(influ)
# Removendo obeservações influentes dffit
dfits <- influ$is.inf[, 4]
id <- which(dfits)
# Atualizando modelo com retira das observação
m3 <- update(m2, data = dados[-id,])
summary(m3)
# Gráficos residuais, para análise
par(mfrow = c(2, 2))
plot(m3)
#
MASS::boxcox(m3)
abline(v = 1, col = "red")
car::vif(m3)
car::vif(m2)
car::vif(m3)
# Criando modelos para ajuste
modelo0 <- lm(number_of_species ~ 1, data = dados)
modelo1 <- lm(number_of_species ~ latitude + elevation + number_of_soil_types + latitude * number_of_soil_types, data = dados)
modelo2 <- lm(number_of_species ~ ., data = dados)
# Coletando informações de ajustes dos modelos
fit0 <- summary(modelo0)
fit1 <- summary(modelo1)
fit2 <- summary(modelo2)
# Tabulado resultado R2 e R2_Ajustado
R2 <- c(fit0$r.squared, fit1$r.squared, fit2$r.squared)
R2_ajustado <- c(fit0$adj.r.squared, fit1$adj.r.squared, fit2$adj.r.squared)
Modelo <- paste("Modelo", 0:2)
gof <- cbind(R2, R2_ajustado)
rownames(gof) <- Modelo
gof
# Criando modelos para ajuste
modelo0 <- lm(number_of_species ~ 1, data = dados)
modelo1 <- lm(number_of_species ~ latitude + elevation + number_of_soil_types + latitude * number_of_soil_types, data = dados)
modelo2 <- lm(number_of_species ~ ., data = dados)
# Coletando informações de ajustes dos modelos
fit0 <- summary(modelo0)
fit1 <- summary(modelo1)
fit2 <- summary(modelo2)
# Tabulado resultado R2 e R2_Ajustado
R2 <- c(fit0$r.squared, fit1$r.squared, fit2$r.squared)
R2_ajustado <- c(fit0$adj.r.squared, fit1$adj.r.squared, fit2$adj.r.squared)
Modelo <- paste("Modelo", 0:2)
gof <- cbind(R2, R2_ajustado)
rownames(gof) <- Modelo
gof
# Resumo Modelo 01
summary(modelo1)
m_x1 <- step(modelo2, direction = "both")
summary(m_x1)
m_x2 <- step(modelo2, direction = "both", k = log(nrow(dados)))
summary(m_x2)
# Gráficos residuais, para análise
par(mfrow = c(2, 2))
plot(modelo1)
# Teste de siguinificancia da regresão
anova(modelo0, modelo1)
anova(modelo1)
drop1(modelo1, test = "F")
m0 <- lm(number_of_species ~ latitude + number_of_soil_types + latitude * number_of_soil_types, data = dados)
summary(m0)
influ <- influence.measures(m0)
summary(influ)
# Removendo obeservações influentes dffit
dfits <- influ$is.inf[, 4]
id <- which(dfits)
# Atualizando modelo com retira das observação
m1 <- update(m0, data = dados[-id,])
summary(m1)
# Gráficos residuais, para análise
par(mfrow = c(2, 2))
plot(m1)
#
car::vif(m1)
m2 <- lm(number_of_species ~ latitude + sqrt(number_of_soil_types) + latitude * sqrt(number_of_soil_types), data = dados)
summary(m2)
# Gráficos residuais, para análise
par(mfrow = c(2, 2))
plot(m2)
#
MASS::boxcox(m3)
abline(v = 1, col = "red")
car::vif(m2)
# Gráfico de Linhas Ajustadas por Grupos
# Usando ggplot2 para ajustar linhas para diferentes grupos de latitude
ggplot(dados, aes(x = sqrt(number_of_soil_types), y = number_of_species, color = factor(latitude > mean(latitude)))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Linhas Ajustadas por Latitude Alta e Baixa",
x = "sqrt(Number of Soil Types)",
y = "Number of Species",
color = "Latitude > Média")
# Obter os valores preditos
valores_pretitos <- predict(m3)
# Calcular o erro quadrático
erro_quadratico <- (dados$number_of_species - valores_pretitos)^2
# Calcular o RMSE
rmse <- sqrt(mean(erro_quadratico))
# Mostrar o resultado
cat("RMSE:", rmse, "\n")
#
MASS::boxcox(m2)
abline(v = 1, col = "red")
car::vif(m2)
# Obter os valores preditos
valores_pretitos <- predict(m2)
# Calcular o erro quadrático
erro_quadratico <- (dados$number_of_species - valores_pretitos)^2
# Calcular o RMSE
rmse <- sqrt(mean(erro_quadratico))
# Mostrar o resultado
cat("RMSE:", rmse, "\n")
# Preparando variáveis independentes (como uma matriz) e a variável dependente.
x <- as.matrix(dados[, c("area", "latitude", "elevation", "number_of_soil_types", "distance_from_britain")])
y <- dados$number_of_species
# Ajustar o modelo Ridge
m4 <- glmnet(x, y, alpha = 0)
# Visualizar os coeficientes
plot(m4, xvar = "lambda", label = TRUE)
# Validação cruzada para escolher o melhor lambda
cv_ridge <- cv.glmnet(x, y, alpha = 0)
# Melhor lambda
melhor_lambda <- cv_ridge$lambda.min
# Visualizar o resultado da validação cruzada
plot(cv_ridge)
# Ajustar o modelo final com o melhor lambda
modelo_final <- glmnet(x, y, alpha = 0, lambda = melhor_lambda)
# Coeficientes finais
coeficientes_finais <- coef(modelo_final)
print(coeficientes_finais)
# Fazer predições
predicoes <- predict(modelo_final, newx = x)
# Calcular RMSE
rmse <- sqrt(mean((y - predicoes)^2))
# Calcular MAE
mae <- mean(abs(y - predicoes))
# Mostrar os resultados
cat("RMSE:", rmse, "\n")
cat("MAE:", mae, "\n")
# Obter os valores preditos
valores_pretitos <- predict(m1)
# Calcular o erro quadrático
erro_quadratico <- (dados$number_of_species - valores_pretitos)^2
# Calcular o RMSE
rmse <- sqrt(mean(erro_quadratico))
# Mostrar o resultado
cat("RMSE:", rmse, "\n")
# Obter os valores preditos
v_pretitos_m1 <- predict(m1)
v_pretitos_m2 <- predict(m2)
# Calcular o erro quadrático
erro_quadratico_m1 <- (dados$number_of_species - v_pretitos_m1)^2
erro_quadratico_m2 <- (dados$number_of_species - v_pretitos_m2)^2
# Calcular o RMSE
rmse_m1 <- sqrt(mean(erro_quadratico_m1))
rmse_m2 <- sqrt(mean(erro_quadratico_m2))
# Mostrar o resultado
cat("RMSE m1:", rmse_m1,)
# Obter os valores preditos
v_pretitos_m1 <- predict(m1)
v_pretitos_m2 <- predict(m2)
# Calcular o erro quadrático
erro_quadratico_m1 <- (dados$number_of_species - v_pretitos_m1)^2
erro_quadratico_m2 <- (dados$number_of_species - v_pretitos_m2)^2
# Calcular o RMSE
rmse_m1 <- sqrt(mean(erro_quadratico_m1))
rmse_m2 <- sqrt(mean(erro_quadratico_m2))
# Mostrar o resultado
cat("RMSE m1:", rmse_m1)
cat("RMSE m2:", rmse_m2, "\n")
# Obter os valores preditos
v_pretitos_m1 <- predict(m1)
v_pretitos_m2 <- predict(m2)
# Calcular o erro quadrático
erro_quadratico_m1 <- (dados$number_of_species - v_pretitos_m1)^2
erro_quadratico_m2 <- (dados$number_of_species - v_pretitos_m2)^2
# Calcular o RMSE
rmse_m1 <- sqrt(mean(erro_quadratico_m1))
rmse_m2 <- sqrt(mean(erro_quadratico_m2))
# Mostrar o resultado
cat("RMSE m1:", rmse_m1, "\n")
cat("RMSE m2:", rmse_m2, "\n")
# Gráfico de Regressão Parcial (Added Variable Plot)
# Os gráficos de variáveis adicionadas mostram o efeito de uma variável explicativa, considerando as outras já no modelo.
avPlots(m3)
# Gráfico de Regressão Parcial (Added Variable Plot)
# Os gráficos de variáveis adicionadas mostram o efeito de uma variável explicativa, considerando as outras já no modelo.
avPlots(m2)
df <- dados %>%
mutate(newCol = rowMeans(select(., area, elevation, number_of_soil_types, latitude, distance_from_britain)))
df
m5 = lm(number_of_species ~ newCol, data = df)
summary(m5)
df <- dados %>%
mutate(newCol = rowMeans(select(., area, elevation, latitude, distance_from_britain)))
df
m5 = lm(number_of_species ~ newCol, data = df)
summary(m5)
df <- dados %>%
mutate(newCol = rowMeans(select(., area, elevation, latitude)))
df
m5 = lm(number_of_species ~ newCol, data = df)
summary(m5)
df <- dados %>%
mutate(newCol = rowMeans(select(., elevation, latitude)))
df
m5 = lm(number_of_species ~ newCol, data = df)
summary(m5)
df <- dados %>%
mutate(newCol = rowMeans(select(., area, latitude)))
df
m5 = lm(number_of_species ~ newCol, data = df)
summary(m5)
df <- dados %>%
mutate(newCol = rowMeans(select(., latitude)))
df
m5 = lm(number_of_species ~ newCol, data = df)
summary(m5)
# Padronizar as colunas coluna1, coluna2 e coluna3
df_padronizado <- dados %>%
mutate(across(area:distance_from_britain, ~ scale(.) %>% as.vector(), .names = "padronizado_{col}"))
# Ver o resultado
print(df_padronizado)
# Padronizar as colunas coluna1, coluna2 e coluna3
df_padronizado <- dados %>%
mutate(across(area:distance_from_britain, ~ scale(.) %>% as.vector(), .names = "padronizado_{col}"))
select(padronizado_area, padronizado_elevation, padronizado_number_of_soil_types, padronizado_latitude, padronizado_distance_from_britain)
# Padronizar as colunas coluna1, coluna2 e coluna3
df_padronizado <- dados %>%
mutate(across(area:distance_from_britain, ~ scale(.) %>% as.vector(), .names = "padronizado_{col}")) +
select(padronizado_area, padronizado_elevation, padronizado_number_of_soil_types, padronizado_latitude, padronizado_distance_from_britain)
# Padronizar as colunas coluna1, coluna2 e coluna3
df_padronizado <- dados %>%
mutate(across(area:distance_from_britain, ~ scale(.) %>% as.vector(), .names = "padronizado_{col}")) %>%
select(padronizado_area, padronizado_elevation, padronizado_number_of_soil_types, padronizado_latitude, padronizado_distance_from_britain)
# Ver o resultado
print(df_padronizado)
# Padronizar as colunas coluna1, coluna2 e coluna3
df_padronizado <- dados %>%
mutate(across(area:number_of_species, ~ scale(.) %>% as.vector(), .names = "padronizado_{col}")) %>%
select(padronizado_area, padronizado_elevation, padronizado_number_of_soil_types, padronizado_latitude, padronizado_distance_from_britain, ... = padronizado_number_of_species)
# Padronizar as colunas coluna1, coluna2 e coluna3
df_padronizado <- dados %>%
mutate(across(area:number_of_species, ~ scale(.) %>% as.vector(), .names = "padronizado_{col}")) %>%
select(padronizado_area, padronizado_elevation, padronizado_number_of_soil_types, padronizado_latitude, padronizado_distance_from_britain, padronizado_number_of_species)
# Ver o resultado
print(df_padronizado)
m5 = lm(padronizado_number_of_species ~ ., data = df_padronizado)
summary(m5)
car::vif(m5)
# Padronizar as colunas coluna1, coluna2 e coluna3
df_padronizado <- dados %>%
mutate(across(area:number_of_species, ~ scale(.) %>% as.vector(), .names = "pz_{col}")) %>%
select(padronizado_area, padronizado_elevation, padronizado_number_of_soil_types, padronizado_latitude, padronizado_distance_from_britain, padronizado_number_of_species)
# Padronizar as colunas coluna1, coluna2 e coluna3
df_padronizado <- dados %>%
mutate(across(area:number_of_species, ~ scale(.) %>% as.vector(), .names = "pz_{col}")) %>%
select(pz_area, pz_elevation, pz_number_of_soil_types, pz_latitude, pz_distance_from_britain, p_number_of_species)
# Padronizar as colunas coluna1, coluna2 e coluna3
df_padronizado <- dados %>%
mutate(across(area:number_of_species, ~ scale(.) %>% as.vector(), .names = "pz_{col}")) %>%
select(pz_area, pz_elevation, pz_number_of_soil_types, pz_latitude, pz_distance_from_britain, pz_number_of_species)
# Ver o resultado
print(df_padronizado)
car::vif(m5)
m6 <- step(m5, direction = "both", k = log(nrow(df_padronizado)))
car::vif(m5)
m5 = lm(padronizado_number_of_species ~ ., data = df_padronizado)
# Padronizar as colunas coluna1, coluna2 e coluna3
df_padronizado <- dados %>%
mutate(across(area:number_of_species, ~ scale(.) %>% as.vector(), .names = "pz_{col}")) %>%
select(pz_area, pz_elevation, pz_number_of_soil_types, pz_latitude, pz_distance_from_britain, pz_number_of_species)
# Ver o resultado
print(df_padronizado)
m5 = lm(padronizado_number_of_species ~ ., data = df_padronizado)
# Padronizar as colunas coluna1, coluna2 e coluna3
df_padronizado <- dados %>%
mutate(across(area:number_of_species, ~ scale(.) %>% as.vector(), .names = "pz_{col}")) %>%
select(pz_area, pz_elevation, pz_number_of_soil_types, pz_latitude, pz_distance_from_britain, pz_number_of_species)
# Ver o resultado
print(df_padronizado)
m5 = lm(pz_number_of_species ~ ., data = df_padronizado)
summary(m5)
car::vif(m5)
m6 <- step(m5, direction = "both", k = log(nrow(df_padronizado)))
summary(m6)
m6 <- step(m5, direction = "both", k = log(nrow(df_padronizado)))
summary(m6)
# Padronizar as colunas coluna1, coluna2 e coluna3
df_padronizado <- dados %>%
mutate(across(area:number_of_species, ~ scale(.) %>% as.vector(), .names = "pz_{col}")) %>%
select(pz_area, pz_elevation, pz_number_of_soil_types, pz_latitude, pz_distance_from_britain, pz_number_of_species)
# Ver o resultado
print(df_padronizado)
m5 = lm(pz_number_of_species ~ ., data = df_padronizado)
summary(m5)
car::vif(m5)
m6 <- step(m5, direction = "both", k = log(nrow(df_padronizado)))
summary(m6)
m7 = lm(pz_number_of_species ~ pz_number_of_soil_types, data = df_padronizado)
summary(m7)
m7 = lm(pz_number_of_species ~ pz_number_of_soil_types + pz_latitude, data = df_padronizado)
summary(m7)
car::vif(m7)
# Gráficos residuais, para análise
par(mfrow = c(2, 2))
plot(m7)
influ <- influence.measures(m7)
summary(influ)
# Removendo obeservações influentes dffit
dfits <- influ$is.inf[, 4]
id <- which(dfits)
# Atualizando modelo com retira das observação
m7 <- update(m7, data = dados[-id,])
# Removendo obeservações influentes dffit
dfits <- influ$is.inf[, 4]
id <- which(dfits)
# Atualizando modelo com retira das observação
m7 <- update(m7, data = dados[-id,])
# Removendo obeservações influentes dffit
dfits <- influ$is.inf[, 4]
id <- which(dfits)
# Atualizando modelo com retira das observação
m8 <- update(m7, data = dados[-id,])
# Removendo obeservações influentes dffit
dfits <- influ$is.inf[, 4]
id <- which(dfits)
# Atualizando modelo com retira das observação
m8 <- update(m7, data = dados[-id,])
# Padronizar as colunas coluna1, coluna2 e coluna3
df_padronizado <- dados %>%
mutate(across(area:number_of_species, ~ scale(.) %>% as.vector(), .names = "pz_{col}")) %>%
select(pz_area, pz_elevation, pz_number_of_soil_types, pz_latitude, pz_distance_from_britain, pz_number_of_species)
# Ver o resultado
print(df_padronizado)
m5 = lm(pz_number_of_species ~ ., data = df_padronizado)
summary(m5)
m5 = lm(pz_number_of_species ~ ., data = df_padronizado)
summary(m5)
car::vif(m5)
m6 <- step(m5, direction = "both", k = log(nrow(df_padronizado)))
summary(m6)
m7 = lm(pz_number_of_species ~ pz_number_of_soil_types + pz_latitude, data = df_padronizado)
summary(m7)
car::vif(m7)
# Gráficos residuais, para análise
par(mfrow = c(2, 2))
plot(m7)
influ <- influence.measures(m7)
summary(influ)
# Removendo obeservações influentes dffit
dfits <- influ$is.inf[, 4]
id <- which(dfits)
# Atualizando modelo com retira das observação
m7 <- update(m7, data = df_padronizado[-id,])
summary(m7)
influ <- influence.measures(m7)
summary(influ)
# Gráficos residuais, para análise
par(mfrow = c(2, 2))
plot(m7)
#
MASS::boxcox(m7)
#
MASS::boxcox(m7)
# Fazer predições
predicoes <- predict(m7, newx = x)
# Calcular RMSE
rmse <- sqrt(mean((y - predicoes)^2))
# Calcular MAE
mae <- mean(abs(y - predicoes))
# Mostrar os resultados
cat("RMSE:", rmse, "\n")
cat("MAE:", mae, "\n")
# Fazer predições
predicoes <- predict(m7, newx = x)
# Calcular RMSE
rmse <- sqrt(mean((y - predicoes)^2))
# Calcular MAE
mae <- mean(abs(y - predicoes))
# Mostrar os resultados
cat("RMSE:", rmse, "\n")
cat("MAE:", mae, "\n")
